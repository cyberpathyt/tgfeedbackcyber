import os
import gspread
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import BoundFilter
from aiogram.utils.exceptions import Throttled
from collections import Counter
import logging
from fastapi import FastAPI
import uvicorn
import asyncio
from contextlib import asynccontextmanager
from fastapi.responses import JSONResponse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('TELEGRAM_TOKEN'))
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä YouTube —Å—Å—ã–ª–æ–∫
class YouTubeFilter(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        if not message.text or message.text.startswith('/'):
            return False
            
        patterns = [
            r'(?:https?://)?(?:www\.)?youtube\.com/watch\?v=([^&\s]+)',
            r'(?:https?://)?(?:www\.)?youtu\.be/([^?\s]+)',
            r'(?:https?://)?(?:www\.)?youtube\.com/shorts/([^?\s]+)',
            r'(?:https?://)?(?:www\.)?youtube\.com/embed/([^?\s]+)',
            r'(?:https?://)?(?:www\.)?youtube\.com/live/([^?\s]+)'
        ]
        
        return any(re.search(pattern, message.text, re.IGNORECASE) for pattern in patterns)

dp.filters_factory.bind(YouTubeFilter)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def get_sheet():
    try:
        gc = gspread.service_account(filename="credentials.json")
        sheet_url = os.getenv('GOOGLE_SHEET_URL')
        if not sheet_url:
            raise ValueError("GOOGLE_SHEET_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–µ–Ω")
            
        sh = gc.open_by_url(sheet_url)
        worksheet = sh.sheet1
        logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ: {sh.title}")
        return worksheet
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: {e}")
        raise

def is_recent(date_str: str, days: int = 30) -> bool:
    if not date_str:
        return False
        
    for fmt in ('%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M:%S', '%m/%d/%Y %H:%M:%S'):
        try:
            date = datetime.strptime(date_str, fmt)
            return (datetime.now() - date) < timedelta(days=days)
        except ValueError:
            continue
    return False

def get_user_rank(user_id: int) -> int:
    try:
        sheet = get_sheet()
        records = sheet.get_all_records()
        
        if not records or 'User ID' not in records[0]:
            logger.error("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ 'User ID'")
            return 0
            
        counts = Counter(str(row['User ID']) for row in records)
        sorted_users = sorted(counts.items(), key=lambda x: (-x[1], x[0]))
        
        user_id_str = str(user_id)
        for rank, (uid, _) in enumerate(sorted_users, 1):
            if uid == user_id_str:
                return rank
        return 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        return 0

# –ê–Ω—Ç–∏—Å–ø–∞–º
@dp.throttled(rate=30)
async def anti_spam(message: types.Message, throttled: Throttled):
    if throttled.exceeded_count <= 2:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message_handler(commands=['stats'])
async def send_stats(message: types.Message):
    try:
        user = message.from_user
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /stats –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username})")
        
        stats = await generate_stats(user.id)
        await message.answer(stats, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏",
            parse_mode='HTML'
        )

async def generate_stats(user_id: int) -> str:
    try:
        sheet = get_sheet()
        records = sheet.get_all_records()
        
        if not records:
            return "üìä –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
        user_data = [row for row in records if str(row.get('User ID', '')) == str(user_id)]
        monthly = sum(1 for d in user_data if is_recent(d.get('Date', '')))
        rank = get_user_rank(user_id)
        
        return (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n"
            f"‚îú –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <code>{len(user_data)}</code>\n"
            f"‚îú –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: <code>{monthly}</code>\n"
            f"‚îî –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: <code>{rank}</code> –º–µ—Å—Ç–æ"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return "üìä –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ YouTube —Å—Å—ã–ª–æ–∫
@dp.message_handler(YouTubeFilter())
async def handle_youtube(message: types.Message):
    try:
        await anti_spam(message, None)
        
        user = message.from_user
        sheet = get_sheet()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        url = message.text.split('?')[0].split('&')[0]
        logger.info(f"–ù–æ–≤–∞—è YouTube —Å—Å—ã–ª–∫–∞ –æ—Ç {user.id}: {url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
        sheet.append_row([
            user.username or "–ê–Ω–æ–Ω–∏–º",
            user.id,
            url,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ])
        
        stats = await generate_stats(user.id)
        await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n{stats}", parse_mode='HTML')
        
    except gspread.exceptions.APIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google Sheets: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
@dp.message_handler(commands=['test'])
async def test_command(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
        sheet = get_sheet()
        records = sheet.get_all_records()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = message.from_user
        user_data = [row for row in records if str(row.get('User ID', '')) == str(user.id)]
        
        await message.answer(
            f"üõ† <b>–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã</b>\n"
            f"User ID: <code>{user.id}</code>\n"
            f"Username: <code>{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <code>{sheet.title}</code>\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <code>{len(records)}</code>\n"
            f"–í–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: <code>{len(user_data)}</code>\n"
            f"–°—Ç–∞—Ç—É—Å: <b>—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test: {e}")
        await message.answer(
            f"‚ùå <b>–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω</b>\n"
            f"–û—à–∏–±–∫–∞: <code>{str(e)}</code>\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π",
            parse_mode='HTML'
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_text(message: types.Message):
    if message.text.startswith('/'):
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    else:
        await message.answer("üö´ –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ YouTube-—Å—Å—ã–ª–∫–∏")
        await message.delete()

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot_safely():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        await dp.start_polling()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

# Lifespan –¥–ª—è FastAPI
@asynccontextmanager
async def lifespan(app: FastAPI):
    bot_task = asyncio.create_task(run_bot_safely())
    logger.info("–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
    
    yield
    
    bot_task.cancel()
    try:
        await bot_task
    except asyncio.CancelledError:
        logger.info("–ó–∞–¥–∞—á–∞ –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    await dp.storage.close()
    await dp.storage.wait_closed()
    await bot.session.close()
    logger.info("–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

app = FastAPI(lifespan=lifespan)

@app.get("/")
async def health_check():
    return JSONResponse(content={"status": "ok", "bot": "running"})

if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    uvicorn.run(app, host="0.0.0.0", port=port)
