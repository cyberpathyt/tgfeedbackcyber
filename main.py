import os
import gspread
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import BoundFilter
from aiogram.utils.exceptions import Throttled
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMINS = os.getenv('ADMINS', '').split(',')
THROTTLE_RATE = 30  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())
logger = logging.getLogger(__name__)

# –§–∏–ª—å—Ç—Ä –¥–ª—è YouTube —Å—Å—ã–ª–æ–∫
class YouTubeFilter(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        return 'youtube.com' in message.text.lower() or 'youtu.be' in message.text.lower()

dp.filters_factory.bind(YouTubeFilter)

# –ê–Ω—Ç–∏—Å–ø–∞–º
@dp.message_handler(commands=['stats'], throttle_rate=THROTTLE_RATE)
@dp.message_handler(YouTubeFilter(), throttle_rate=THROTTLE_RATE)
async def anti_spam(message: types.Message, throttled: Throttled):
    if throttled.exceeded_count <= 2:
        await message.reply("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def get_sheet():
    gc = gspread.service_account(filename="credentials.json")
    return gc.open_by_url(os.getenv('GOOGLE_SHEET_URL')).sheet1

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
async def generate_stats_image(user_id: int):
    sheet = get_sheet()
    all_data = sheet.get_all_records()
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = [row for row in all_data if str(row['User ID']) == str(user_id)]
    monthly_data = [row for row in user_data if datetime.now() - datetime.strptime(row['Date'], '%Y-%m-%d %H:%M:%S') < timedelta(days=30)]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10, 6))
    
    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    dates = [datetime.strptime(row['Date'], '%Y-%m-%d %H:%M:%S') for row in user_data]
    plt.hist(dates, bins=30, alpha=0.7, label='–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
    
    plt.title('–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π')
    plt.legend()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

# –ö–æ–º–∞–Ω–¥–∞ /stats
@dp.message_handler(commands=['stats'])
async def show_stats(message: types.Message):
    try:
        # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if str(message.from_user.id) not in ADMINS:
            await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
            
        image = await generate_stats_image(message.from_user.id)
        await message.answer_photo(photo=image, caption="üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
    except Exception as e:
        logger.error(f"Stats error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(YouTubeFilter())
async def handle_youtube_link(message: types.Message):
    try:
        user = message.from_user
        sheet = get_sheet()
        
        # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
        sheet.append_row([
            user.username or "–ê–Ω–æ–Ω–∏–º",
            user.id,
            message.text,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ])
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        all_data = sheet.get_all_records()
        user_entries = len([row for row in all_data if str(row['User ID']) == str(user.id)])
        monthly_entries = len([row for row in all_data if str(row['User ID']) == str(user.id) and 
                             datetime.now() - datetime.strptime(row['Date'], '%Y-%m-%d %H:%M:%S') < timedelta(days=30)])
        
        # –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_users = {}
        for row in all_data:
            uid = str(row['User ID'])
            all_users[uid] = all_users.get(uid, 0) + 1
        
        sorted_users = sorted(all_users.items(), key=lambda x: x[1], reverse=True)
        user_rank = [i+1 for i, (uid, _) in enumerate(sorted_users) if uid == str(user.id)][0]
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = f"""
‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:
‚îú –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {user_entries}
‚îú –ó–∞ –º–µ—Å—è—Ü: {monthly_entries}
‚îî –†–µ–π—Ç–∏–Ω–≥: {user_rank}-–µ –º–µ—Å—Ç–æ –∏–∑ {len(all_users)}

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! üöÄ
        """
        await message.answer(stats_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error saving link: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ-YouTube —Å—Å—ã–ª–æ–∫
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_non_youtube(message: types.Message):
    await message.answer("üö´ –≠—Ç–æ –Ω–µ YouTube-—Å—Å—ã–ª–∫–∞! –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube.")
    await message.delete()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
